#+title: Emacs-core - A Lightweight Emacs Configuration
#+author: James Dyer
#+date: 2024
#+description: A stripped-down Emacs configuration that avoids external packages, perfect for lightweight usage in VMs or basic tasks.
#+startup: showall
#+todo: TODO DOING | DONE
#+property: header-args :tangle no

* Introduction

*Emacs-core* is a stripped-down version of my primary Emacs configuration. It is designed to leverage only the default built-in features of Emacs (v27.1 and later). This makes it ideal for virtual machines or scenarios where you need a fast, package-free Emacs setup that works out of the box on most systems.

Supported Platforms:
- SUSE Linux Enterprise (SLES15)
- SwayWM - Wayland
- Windows 10

Looking to potentially support:
- OpenSuse 11.2 (November 12, 2009)

The configuration focuses on ease of use by providing custom keybindings, basic completion support, and visual enhancements without relying on any external packages.

Note that this package works in combination with https://github.com/captainflasmr/Emacs-enhanced which is a conversion of major Emacs packages / functions, especially ones that I rely on to single defuns.

* Whats New

** <2024-12-18>

Replaced tempel with abbrev, will have to write a blog post about this but replacing the following tempel template :

#+begin_src 
fundamental-mode ;; Available everywhere

(ja (format-time-string "<%Y-%m-%d>"))
(jT (format-time-string "%Y%m%d%H%M%S"))
(jt (format-time-string "%Y%m%d"))
(ji "(interactive)")
(jl "(lambda ()")

org-mode

(jm "#+hugo: more")
(jg "#+attr_org: :width 300px" n "#+attr_html: :width 100%")
(je "#+attr_org: :width 300px" n "#+attr_html: :class emacs-img")
(jo "---" n "#+TOC: headlines 1 local" n "---")
(jk "#+begin: kanban :layout (\"...\" . 40) :scope nil :range (\"TODO\" . \"DONE\") :sort \"O\" :depth 2 :compressed t" n "#+end:")
(jp "~--APT--~ ")

sh-mode
(jd n "echo \"poop: " p "\"" n)

emacs-lisp-mode
(jd n "(message \"poop: " p "\"\)" n)

ada-mode
(jd n> "Ada.Text_Io.Put_Line \( \"poop: " p "\"\);" n)

c++-mode
(jd n> "std::cout << \"poop: " p "\" << std::endl;" n)

c-mode
(jd n> "fprintf(stderr, \"poop: " p "\"\);" n)
#+end_src

with the following abbrev =abbrev_defs=:

#+begin_src 
;;-*-coding: utf-8;-*-
(define-abbrev-table 'ada-mode-abbrev-table
  '(
    ("jd" "Ada.Text_Io.Put_Line (\"poop: \");" nil :count 0)
   ))

(define-abbrev-table 'c++-mode-abbrev-table
  '(
    ("jd" "std::cout << \"poop: \" << std::endl;" nil :count 0)
   ))

(define-abbrev-table 'c-mode-abbrev-table
  '(
    ("jd" "printf(stderr, \"poop: \");" nil :count 0)
   ))

(define-abbrev-table 'emacs-lisp-mode-abbrev-table
  '(
    ("jd" "(message \"poop: \")" nil :count 0)
   ))

(define-abbrev-table 'global-abbrev-table
  '(
    ("jT" "" (lambda nil (interactive) (insert (format-time-string "%Y%m%d%H%M%S"))) :count 0)
    ("ja" "" (lambda nil (interactive) (insert (format-time-string "<%Y-%m-%d>"))) :count 1)
    ("ji" "(interactive)" nil :count 1)
    ("jl" "(lambda ()" nil :count 0)
    ("jt" "" (lambda nil (interactive) (insert (format-time-string "%Y%m%d"))) :count 0)
   ))

(define-abbrev-table 'org-mode-abbrev-table
  '(
    ("je" "#+attr_org: :width 300px
,#+attr_html: :class emacs-img" nil :count 0)
    ("jg" "#+attr_org: :width 300px
,#+attr_html: :width 100%" nil :count 0)
    ("jk" "#+begin: kanban :layout (\"...\") :scope nil :range (\"TODO\" . \"DONE\") :sort \"O\" :depth 2 :compressed t
,#+end:" nil :count 0)
    ("jm" "#+hugo: more" nil :count 0)
    ("jo" "---
,#+TOC: headlines 1 local
---" nil :count 0)
    ("jp" "~--APT--~" nil :count 0)
   ))

(define-abbrev-table 'sh-mode-abbrev-table
  '(
    ("jd" "echo \"poop: \"" nil :count 0)
   ))
#+end_src

** <2024-12-16>

feat(emacs): Enhance =dired= and =image-dired= configurations

- *=dired=*:
  - Added a new keybinding (=C-c i=) for =my/image-dired-sort=.
  - Improved file management capabilities within Dired interface.

- *Spell-checking*:
  - Integrated =dictionary.el= for on-the-fly word definitions.
  - Added =C-c s d= for dictionary lookup.
  - Introduced =C-0= as dedicated keybinding for =ispell-word=.

- *=image-dired=*:
  - Introduced custom behavior for image manipulation:
    - Added =my/image-dired-sort= for better image sorting in Dired.
    - Defined keybindings to streamline navigation and editing in =image-dired=.
  - Configured a split-buffer layout for enhanced productivity.
  - Added helper functions (=my/image-save-as=, =my/delete-current-image-and-move-to-next=, etc.) for managing images programmatically.
  - Enabled external image viewing via =gthumb=.

** <2024-12-14>

Added my/find-file to be a more flexible ripgrep based finding file tool.

** <2024-12-14>

Added deadgrep kind of replacement called my/grep with leveraging ripgrep into a type of grep Emacs buffer.

** <2024-12-10>

Added ada-mode support out of the box.

Yes, ada-mode was removed from emacs and it was recommended to use the ada-mode supplied by AdaCore, however this is all but impossible to set up so including =ada-light=mode= as part of the configuration.

https://github.com/sebastianpoeplau/ada-light-mode

** <2024-12-09>

Added =visual-fill-column-mode= replacement with a simple elisp function (see solution in roadmap)

** <2024-12-09>

Added =my-icomplete-copy-candidate= to allow embark like copying of current candidate (see solution in roadmap)

** <2024-12-09>

Added =my/recentf-open= to bypass old default recentf-open interface (see solution in roadmap)

** <2024-12-09>

enhance window navigation and introduce my rainbow mode (see solution in roadmap)

- Refactored `my/quick-window-jump` for better window labeling and overlay management:
  - Improved window sorting logic for more accurate top-to-bottom, left-to-right navigation.
  - Added visual overlays to display window shortcuts with labels.
- Introduced `my/rainbow-mode`:
  - Overlays hex color values in buffers with their respective colors for better readability.
- Minor refactor to `my/copy-buffer-to-kill-ring` by removing redundant `save-excursion`.
- Corrected a typo: Renamed `identation-core` to `indentation-core`.
- Added `my/eglot-dir-locals` for ADA mode to simplify `.dir-locals.el` file creation:
  - Supports Eglot workspace configuration based on paths from Dired.
- Updated version control handling to consider only `SVN` and `Git` backends.

* Benefits

This emacs init configuration will provide me with the following benefits.

** Portability and Compatibility

- *Minimal setup across diverse platforms:*
  
  - Works seamlessly on almost any system where Emacs (v27.1+) is pre-installed or can be installed, without requiring internet access or additional dependencies.
  - Compatible with systems where external repositories like *MELPA* or *ELPA* are inaccessible (e.g., air-gapped systems, high-security environments, or restricted corporate setups).
  - Handles differences across disparate systems, such as:
    - *Linux (X11/Wayland):* Avoids reliance on GUI-based packages that may fail due to configuration mismatches.
    - *Windows:* Eliminates common issues like managing package archives, slow startup, or connectivity problems.
    - *macOS:* Works well even with the default version of Emacs shipped with macOS, many of which are compiled without key extensions.
- *Cross-version compatibility:*
  - Designed with vanilla Emacs features, ensuring it works across older and newer Emacs versions (limited to Emacs 27.1+ but avoiding bleeding-edge features of newer versions).

** Performance

- *Optimized for speed:*
  - Faster startup times due to the absence of external package initialization, byte-compilation of third-party libraries, or network lookup delays.
  - Fewer external dependencies mean less time spent on managing or resolving dependency-related issues.
- *Lightweight and resource-efficient:*
  - Avoids third-party packages that sometimes introduce memory bloat or unnecessary configuration overhead.
  - Perfect for virtual machines, resource-constrained systems, or environments requiring efficiency.

** Simplicity and Stability

- *Eliminates external dependencies:*
  - No need to depend on external package managers like MELPA, ELPA, or =straight.el=, making your setup resilient to upstream disruptions.
  - Reduces the risk of breakages introduced by updates to third-party packages.
- *Focuses on native capabilities:*
  - Encourages leveraging in-built Emacs functionality over bloated extensions, helping users master Emacs's native power.
  - Built-in features are generally well-tested and stable across versions, reducing the likelihood of incompatibilities or crashes.

** Usability

- *Beginner-friendly ethos:*
  - A simpler, package-free setup is ideal for teaching beginner users about Emacs, showing them how to rely on core features without the overwhelming complexity of third-party tools.
  - It introduces users to the elegance and power of vanilla Emacs, bypassing distractions from unnecessary packages.
- *Minimal maintenance:*
  - Excellent for situations where you need a reliable, pre-configured Emacs experience for short-term use (e.g., disposable environments, Docker containers, or ephemeral VMs).

** Practicality

- *Air-gapped and offline systems:*
  - Perfect for isolated networks where external package repositories are inaccessible for policy or security reasons.
  - Allows Emacs to remain functional for note-taking, scripting, or other tasks even in environments with no internet access.
- *Ease of distribution:*
  - Since the configuration doesnâ€™t require external dependencies, it can easily be shared or replicated across multiple machines.
  - Can be stored in a single file without the need for a long list of additional package installation instructions.
- *Ideal for DevOps and CI/CD pipelines:*
  - Useful in virtualized or containerized environments (e.g., Docker, CI runners) where you need a fast, reliable Emacs setup without pulling third-party tools.

** Security and Privacy

- *Better control over code and configuration:*
  - No automatic downloads or updates from external repositories, reducing the risk of introducing compromised or vulnerable code.
  - A completely self-contained configuration ensures no unexpected behaviour from unverified third-party plugins or libraries.
- *Privacy-friendly:*
  - No metadata is queried, and no connections are made to package repositories, ensuring greater privacy when using Emacs in sensitive environments.

** Encourages Learning and Mastery

- By restricting yourself to core Emacs functionality, you develop a deeper understanding of:
  - Efficient workflows based on what's built into Emacs.
  - How to solve problems creatively using only the default, extensible tools.
- Provides a solid foundation for customizing Emacs further once needed, without becoming overly dependent on external tools.

** Flexibility for Advanced Users

- *Base for users who prefer to build incrementally:*
  - Acts as a reliable "core" configuration, allowing users to selectively add new features as needed while minimizing risk and clutter.
  - Encourages selective evaluation of any third-party package for inclusion rather than indiscriminately combining external libraries.
- *Emphasis on timeless workflows:*
  - Built on enduring Emacs features that have been consistent for decades, ensuring compatibility even with older systems.
  - Can serve as an emergency fallback configuration for experienced users who rely on Emacs in more complex setups.

** Examples of Real-World Use Cases

- *Diagnostics tool:* You can use *Emacs-core* to debug whether an issue is related to third-party packages or stems from Emacs itself by testing the minimal configuration.
- *Always-ready portable editor:* Use it on systems where you're temporarily working without worrying about recreating your primary configuration.
- *Distraction-free writing:* Suited for scenarios where you want a fast, clean, and functional interface without additional bells and whistles.
- *VMs for testing or experimentation:* Perfect for virtual machines or containers where you need a low-maintenance Emacs that can be spun up quickly.

* Key Features

** Built-in Completion

- Default abbreviation expansion and predictive file/directory completion are implemented via =hippie-expand=.
  
- Minibuffer Configuration: Vanilla configuration achieved through enabling =fido-mode= provides an intuitive, fast, and clean completion interface in the minibuffer using the built-in =icomplete= framework without requiring third-party tools.

** Leveraging External Tools Where Possible

It is often advantageous to use *external tools* that are optimized for specific tasks. Emacs offers many built-in tools, but these may not always be the fastest or most feature-rich option available. By integrating with *system-based utilities* when they exist, we can achieve both performance improvements and enhanced capabilities. However, in cases where external tools are unavailable, Emacs' built-in options serve as a reliable fallback.

*** ripgrep - grepping files
**** Functionality
  - Searching across project files for a specific term or pattern.
  - Faster than Emacs' built-in =grep= or =rgrep=
  - Better default handling of ignored files (e.g., =.gitignore= rules).
  - Offers rich pattern matching (regex or literal strings).
**** Fallback
  - Emacs' =grep= or =rgrep= commands provide file searching through built-in utilities like =grep=.
  - While slower and less feature-rich, they can still handle basic directory searches.
*** ripgrep (alternative fd) - finding files
**** Functionality
  - Searching for files in a directory or project.
  - Supports advanced filtering options (e.g., searching by filename extension, ignoring gitignored files).
**** Fallback
  - =find-name-dired= or =project-find-file= for locating files within Emacs projects.
  - Relatively slower on larger directories, but sufficient for small-scale tasks.

** Keybindings for Navigation and Files

- Global Keybindings: Intuitive shortcut keys grant fast access to commonly used directories, files, and dired buffers. These can be configured to cater to personal file organization preferences.
  
- Tab and Buffer Management: Includes keybindings for:
  - Quickly creating, killing, and cycling through buffers.
  - Simplified navigation through tabs in Emacs (using its native tab-bar-mode or tab-line-mode).
  - Use mnemonic key combinations to =split=, =balance=, and =move= between windows, akin to tiling window managers.

** Window and Visual Controls

- Flexibly toggle visual Emacs elements such as:
  - Fonts (adjust point size with keyboard shortcuts).
  - Line numbers (switch between absolute and relative numbering).
  - Themes (light/dark mode switching via a single key).
  - Minor display elements like fringe, scrollbars, and menu bars depending on needs.
    
- Window Management*
  
  - Handy shortcuts for splitting windows, resizing panes, and reshuffling the layout in a minimal keystroke setup.
  - A handcrafted =toggle-centered-buffer= function focuses content by placing the active buffer in the center, hiding distractions in other windows.

** Custom Functions

- Handcrafted Lisp Utilities: A small collection of reusable functions that enhance workflow directly without accessing external configuration files or plugins:
  - =toggle-centered-buffer=: Dynamically rebalances the window layout for distraction-free working.
  - =my/dired-duplicate-file=: Quickly duplicates the currently selected file in dired mode, increasing workflow efficiency for file templating.
  - =my/copy-buffer-to-kill-ring=: Copies the entirety of the current buffer content directly to the kill ring for seamless external clipboard usage.

** No External Packages Required

- No Dependency on ELPA/MELPA: This configuration deliberately avoids using 3rd-party packages, ensuring it remains lightweight and portable across systems. All enhancements and ergonomic tweaks leverage built-in Emacs capabilities and Emacs Lisp.
- Offline-First Design: With no dependency on online repositories or external tools, this setup works out of the box even in restricted or air-gapped environments.

** Additional Ergonomic Setup

- Cross-Platform Key Remapping: Accompanying the Emacs configuration directory are external scripts to enforce ergonomic system-wide keybindings for more efficient Emacs usage:

*** *Windows / wowee*:
    
Note that this is present as a submodule leveraging https://github.com/captainflasmr/wowee which are AutoHotKey scripts that allow easy key remapping and also Emacs type key commands across Windows.

The idea here is that the keys are mapped through AutoHotKey and then Sticky Keys are natively enable to give a nice ergonomic experience through Emacs.

**** Remappings

- CapsLock â†’ Ctrl
- Right Alt â†’ Ctrl
- Sticky Keys natively enabled

**** Instructions for use

1. **Install AutoHotKey**: Download and install AutoHotKey from [AutoHotKey's official website](https://www.autohotkey.com/).
2. **Run WOWEE**: Double-click on the `wowee.ahk` script to start WOWEE. Once running, Emacs commands will be available in your Windows environment.
3. **Quit WOWEE**: To quit WOWEE, right-click the AutoHotKey icon in the task tray and select "Exit."
    
*** *Linux (X11/Wayland)*:
    
Includes custom *xkb* configuration files to enable similar ergonomic key remappings:

**** Remappings

- CapsLock â†’ Ctrl
- Right Alt â†’ Ctrl
- Sticky Keys

**** Instructions for use

  #+begin_src bash
  xkbcomp keymap_with_sticky_modifiers.xkb $DISPLAY
  #+end_src

** Portable Directory Structure

- A self-contained folder structure that encapsulates all necessary files:
  
  #+begin_src 
  emacs-core/
  â”œâ”€â”€ emacs-core.org                   # Main Emacs literate configuration file
  â”œâ”€â”€ init.el                          # Main Emacs configuration file
  â”œâ”€â”€ keymap_with_sticky_modifiers.xkb # linux key configuration for ergonomic key remapping
  â”œâ”€â”€ wowee/                           # Windows autohotkey scripts for ergonomic key remapping
  â””â”€â”€ README.org                       # Setup guide and readme
  #+end_src
  
This directory can be zipped, copied, and unpacked on any machine to instantly set up a usable, ergonomic Emacs environment.

* Setup

- Clone the repository:

   #+begin_src bash
   git clone https://github.com/captainflasmr/Emacs-core ~/.emacs.d.core
   #+end_src


- Symlink the init file:

   #+begin_src bash
   ln -s ~/.emacs.d.core/init.el ~/.emacs.d/init.el
   #+end_src

OR

- Define startup directory

   emacs --init-directory=~/.emacs.d.core

- Launch Emacs:

   #+begin_src bash
   emacs
   #+end_src

- Optional: Customize the paths and keybindings in the **init.el** file to better fit your workflow.

* Roadmap                                                           :roadmap:

For features that will be (hopefully) converted to core see https://github.com/captainflasmr/Emacs-enhanced

* Testing

Created an =emacs-core.desktop= file containing the following:

#+begin_src 
[Desktop Entry]
Name=Emacs Core
GenericName=Text Editor
Comment=Edit text
MimeType=text/english;text/plain;text/x-makefile;text/x-c++hdr;text/x-c++src;text/x-chdr;text/x-csrc;text/x-java;text/x-moc;text/x-pascal;text/x-tcl;text/x-tex;application/x-shellscript;text/x-c;text/x-c++;
Exec=emacs --init-directory=~/.emacs.d.core
Icon=emacs
Type=Application
Terminal=false
Categories=Development;TextEditor;
StartupNotify=true
StartupWMClass=Emacs
Keywords=emacs;
Actions=new-window;new-instance;

[Desktop Action new-window]
Name=New Window
Exec=emacs --init-directory=~/.emacs.d.core

[Desktop Action new-instance]
Name=New Instance
Exec=emacs --init-directory=~/.emacs.d.core %F
#+end_src

and run the basic core Emacs config and test the new features

* Configuration Highlights

Hereâ€™s a breakdown of some key sections in the configuration:

** Completion

Provides simple abbreviation-based completion and an enhanced `hippie-expand` using the following functions:

#+begin_src elisp
;; -> completion
(setq-default abbrev-mode t)
(setq hippie-expand-try-functions-list
      '(try-complete-file-name-partially
        try-complete-file-name
        try-expand-all-abbrevs
        try-expand-dabbrev
        try-expand-dabbrev-all-buffers
        try-expand-dabbrev-from-kill
        try-complete-lisp-symbol-partially
        try-complete-lisp-symbol))
#+end_src

** Basic Mode-line with Fido Mode

Improves the vanilla Emacs minibuffer with more responsive completion using `icomplete`:

#+begin_src elisp
(fido-mode 1)
(define-key icomplete-minibuffer-map (kbd "M-RET") 'my-icomplete-exit-minibuffer-with-input)
(setq icomplete-compute-delay 0)
(setq icomplete-show-matches-on-no-input t)
#+end_src

** Keybindings for Custom Navigation

Define global keybindings for quick access to files and tabs:

#+begin_src elisp
;; -> keys-navigation
(global-set-key (kbd "M-o") my-jump-keymap)
(define-key my-jump-keymap (kbd "e") (lambda () (interactive) (find-file "~/.emacs.d/init.el")))

;; Open scratch buffer
(define-key my-jump-keymap (kbd "r") (lambda () (interactive) (switch-to-buffer "*scratch*")))
#+end_src

**Basic Backups and Data Safety**
Control backup behavior for Emacs:

#+begin_src elisp
;; -> backups
(setq make-backup-files 1)
(setq backup-directory-alist '(("." . "~/backup"))
      backup-by-copying t
      version-control t
      delete-old-versions t
      kept-new-versions 10
      kept-old-versions 5)
#+end_src

**Window Management and Visual Tuning**
Toggle windows, fonts, and visual features:

#+begin_src elisp
;; -> keys-visual
(global-set-key (kbd "C-q") my-win-keymap)
(define-key my-win-keymap (kbd "n") #'display-line-numbers-mode)
(define-key my-win-keymap (kbd "f") #'font-lock-mode)
(define-key my-win-keymap (kbd "m") #'my/load-theme)
#+end_src

* Default Modes and UX Settings

Some key modes are enabled by default for a smoother editing experience:

#+begin_src elisp
;; -> modes
(column-number-mode 1)
(show-paren-mode t)
(global-auto-revert-mode t)
(tab-bar-history-mode 1)
#+end_src

** Additional Configurations

Along with the above highlights, the configuration includes extensive keybindings, system-specific tweaks (for Windows and Linux), and a set of helper functions for day-to-day text processing, file management, and window handling.

* Custom Functions

#+begin_src elisp
;; Duplicates a file in Dired mode with an incremented name
(defun my/dired-duplicate-file (arg)
  "Create a copy of a file in Dired with a numerical increment."
  (interactive "p")
  ;; Implementation...
  )
#+end_src

For a more complete list, explore the `init.el` configuration file.

* Notes

- This configuration intentionally avoids external Emacs packages like `use-package` or `straight.el` to maintain simplicity and remove the requirement for package management.
- Tested on both Linux (SLES15) and Windows environments for compatibility and portability.
