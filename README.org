#+title: Emacs-core - A Lightweight Emacs Configuration
#+author: James Dyer
#+date: 2024
#+description: A stripped-down Emacs configuration that avoids external packages, perfect for lightweight usage in VMs or basic tasks.
#+startup: content
#+todo: TODO DOING | DONE
#+property: header-args :tangle no

* Introduction

*Emacs-core* is a stripped-down version of my primary Emacs configuration. It is designed to leverage only the default built-in features of Emacs (v27.1 and later). This makes it ideal for virtual machines or scenarios where you need a fast, package-free Emacs setup that works out of the box on most systems.

Supported Platforms:
- SUSE Linux Enterprise (SLES15)
- SwayWM - Wayland
- Windows 10

The configuration focuses on ease of use by providing custom keybindings, basic completion support, and visual enhancements without relying on any external packages.

* Whats New

** <2024-12-09>

enhance window navigation and introduce my rainbow mode

- Refactored `my/quick-window-jump` for better window labeling and overlay management:
  - Improved window sorting logic for more accurate top-to-bottom, left-to-right navigation.
  - Added visual overlays to display window shortcuts with labels.
- Introduced `my/rainbow-mode`:
  - Overlays hex color values in buffers with their respective colors for better readability.
- Minor refactor to `my/copy-buffer-to-kill-ring` by removing redundant `save-excursion`.
- Corrected a typo: Renamed `identation-core` to `indentation-core`.
- Added `my/eglot-dir-locals` for ADA mode to simplify `.dir-locals.el` file creation:
  - Supports Eglot workspace configuration based on paths from Dired.
- Updated version control handling to consider only `SVN` and `Git` backends.

* Key Features

** Built-in Completion

- Default abbreviation expansion and predictive file/directory completion are implemented via =hippie-expand=.
  
- Minibuffer Configuration: Vanilla configuration achieved through enabling =fido-mode= provides an intuitive, fast, and clean completion interface in the minibuffer using the built-in =icomplete= framework without requiring third-party tools.

** Keybindings for Navigation and Files

- Global Keybindings: Intuitive shortcut keys grant fast access to commonly used directories, files, and dired buffers. These can be configured to cater to personal file organization preferences.
  
- Tab and Buffer Management: Includes keybindings for:
  - Quickly creating, killing, and cycling through buffers.
  - Simplified navigation through tabs in Emacs (using its native tab-bar-mode or tab-line-mode).
  - Use mnemonic key combinations to =split=, =balance=, and =move= between windows, akin to tiling window managers.

** Window and Visual Controls

- Flexibly toggle visual Emacs elements such as:
  - Fonts (adjust point size with keyboard shortcuts).
  - Line numbers (switch between absolute and relative numbering).
  - Themes (light/dark mode switching via a single key).
  - Minor display elements like fringe, scrollbars, and menu bars depending on needs.
    
- Window Management*
  
  - Handy shortcuts for splitting windows, resizing panes, and reshuffling the layout in a minimal keystroke setup.
  - A handcrafted =toggle-centered-buffer= function focuses content by placing the active buffer in the center, hiding distractions in other windows.

** Custom Functions

- Handcrafted Lisp Utilities: A small collection of reusable functions that enhance workflow directly without accessing external configuration files or plugins:
  - =toggle-centered-buffer=: Dynamically rebalances the window layout for distraction-free working.
  - =my/dired-duplicate-file=: Quickly duplicates the currently selected file in dired mode, increasing workflow efficiency for file templating.
  - =my/copy-buffer-to-kill-ring=: Copies the entirety of the current buffer content directly to the kill ring for seamless external clipboard usage.

** No External Packages Required

- No Dependency on ELPA/MELPA: This configuration deliberately avoids using 3rd-party packages, ensuring it remains lightweight and portable across systems. All enhancements and ergonomic tweaks leverage built-in Emacs capabilities and Emacs Lisp.
- Offline-First Design: With no dependency on online repositories or external tools, this setup works out of the box even in restricted or air-gapped environments.

** Additional Ergonomic Setup

- Cross-Platform Key Remapping: Accompanying the Emacs configuration directory are external scripts to enforce ergonomic system-wide keybindings for more efficient Emacs usage:
  - *Windows*: 
    - Includes *Autohotkey (AHK)* scripts that:
      - Map the *CapsLock* key to *Ctrl* for comfortable keyboard shortcuts like =C-s= (save) or =C-x C-f= (open file).
      - Map the *Right Alt* key to *Ctrl* for ambidextrous modifier usage.
      - Enable *Sticky Keys*, making modifier keys like Ctrl/Alt functional even when pressed momentarily before a second keystroke.
      - Example AHK snippet:
      
        #+begin_src autohotkey
        ; Map CapsLock to Ctrl
        CapsLock::Ctrl
        ; Right Alt to Ctrl
        RAlt::Ctrl
        ; Enable Sticky Keys
        #InstallKeybdHook
        #+end_src
  
  - *Linux (X11/Wayland)*:
    - Includes custom *xkb* configuration files to enable similar ergonomic key remappings:
      - CapsLock → Ctrl.
      - Right Alt → Ctrl.
      - Optionally toggle Sticky Keys for one-handed workflows.
    - Instructions or a provided script to set these configurations using =setxkbmap= or editing XKB configuration files.

- *Offline Configuration Backup*:
  - The ergonomic setup complements Emacs usage perfectly and offers backup scripts to migrate these keymapping changes across systems without requiring online setups.

** Portable Directory Structure

- A self-contained folder structure that encapsulates all necessary files:
  
  #+begin_src 
  emacs-core/
  ├── init.el                   # Main Emacs configuration file
  ├── scripts/                  # Shell/Autohotkey scripts for ergonomic key remapping
  │   ├── windows.ahk
  │   └── linux_xkb.sh
  └── README.md                 # Setup guide
  #+end_src
  
This directory can be zipped, copied, and unpacked on any machine to instantly set up a usable, ergonomic Emacs environment.

* Setup

- Clone the repository:

   #+begin_src bash
   git clone https://github.com/captainflasmr/Emacs-core ~/.emacs.d.core
   #+end_src


- Symlink the init file:

   #+begin_src bash
   ln -s ~/.emacs.d.core/init.el ~/.emacs.d/init.el
   #+end_src

OR

- Define startup directory

   emacs --init-directory=~/.emacs.d.core

- Launch Emacs:

   #+begin_src bash
   emacs
   #+end_src

- Optional: Customize the paths and keybindings in the **init.el** file to better fit your workflow.

* Kanban

Here is a kanban of the features that will be (hopefully) converted to core and visually demonstrating their current status.

#+begin: kanban :layout ("..." . 50) :scope nil :range ("TODO" . "DONE") :sort "O" :depth 3 :match "roadmap" :compressed t
| TODO                                               | DOING        | DONE |
|----------------------------------------------------+--------------+------|
| [[file:README.org::*selected-window-accent-mode][selected-window-accent-mode]]                        | [[file:README.org::*rainbow-mode][rainbow-mode]] |      |
| [[file:README.org::*htmlize][htmlize]]                                            | [[file:README.org::*magit][magit]]        |      |
| [[file:README.org::*embark][embark]]                                             |              |      |
| [[file:README.org::*deadgrep][deadgrep]]                                           |              |      |
| [[file:README.org::*image-dired][image-dired]]                                        |              |      |
| [[file:README.org::*recentf-open-files to recentf-open][recentf-open-files to recentf-open]]                 |              |      |
| [[file:README.org::*find-name-dired replaced with a more flexible version][find-name-dired replaced with a more flexible v...]] |              |      |
| [[file:README.org::*tempel][tempel]]                                             |              |      |
| [[file:README.org::*corfu / company completion][corfu / company completion]]                         |              |      |
| [[file:README.org::*spelling][spelling]]                                           |              |      |
| [[file:README.org::*popper][popper]]                                             |              |      |
| [[file:README.org::*shell][shell]]                                              |              |      |
| [[file:README.org::*capf-autosuggest][capf-autosuggest]]                                   |              |      |
| [[file:README.org::*org-capture][org-capture]]                                        |              |      |
| [[file:README.org::*DWIM script integration][DWIM script integration]]                            |              |      |
| [[file:README.org::*org-agenda][org-agenda]]                                         |              |      |
| [[file:README.org::*kurecolor][kurecolor]]                                          |              |      |
| [[file:README.org::*Ada][Ada]]                                                |              |      |
| [[file:README.org::*transients][transients]]                                         |              |      |
| [[file:README.org::*my/transient-outlining-and-folding][my/transient-outlining-and-folding]]                 |              |      |
| [[file:README.org::*my/prog-folding][my/prog-folding]]                                    |              |      |
#+end:


* Roadmap                                                           :roadmap:

Here are the features that will be (hopefully) converted to core.

** DOING rainbow-mode

Surely I can code something simple up using overlays?, I could also kind of live without if pushed.

** DOING magit

Replace by built-in VC

Just need to be able to push using ssh

** TODO selected-window-accent-mode

My package of highlighting the selected window/tabs, which actually I find very useful and of course due to my familiarity I could code up a more simple version.

** TODO htmlize

Go through the Emacs export mechanism instead and open separate browser window, refreshing when exported each time?

** TODO embark

I am not using too many aspects mainly the following:

- copy command

** TODO deadgrep

Would rgrep be potentially good enough?, maybe, or maybe pull on ripgrep through a simple interface.

** TODO image-dired

Copy over functionality, no real external things, its just is it valuable given how little I use it? 

** TODO recentf-open-files to recentf-open

Given recentf-open was introduced in 29.1 it would probably be straightforward to create a general recentf passing through completing read.  Probably just copy what has been put into recentf.el

** TODO find-name-dired replaced with a more flexible version

Currently find file type jump key functionality for core is just find-name-dired but probably better to have a more flexible version that can still use =find-name-dired= but if ripgrep exists or even find then present those options.  This will then potentially be a more modern approach.

** TODO tempel

I use pretty simple, no yassnippet complexity here, so maybe I can adapt dabrev with some predefined functions for the most common completion replacements?

** TODO corfu / company completion

Can probably live without, as tab completion is probably fine

** TODO spelling

The core is using hunspell, flyspell which works generally pretty well, libreoffice will pretty much always be available or easily installable so hunspell will probably be always available.

I like jinx as it is fast and efficient.

powerthesaurus I don't use that often.

writegood-mode is a favourite, but I could probably live without it.

** TODO popper

Mainly used for popping and popping out shells, I'm sure I can code up an alternative solution here if I need to.

** TODO shell

Can I bring in cape-history into eshell/shell, the main issue is the inline fish type completion which I may be able to live without, but it is really fast and convenient!

** TODO capf-autosuggest

Some elisp for some simple predictive inline completion, maybe take a look at how capf-autosuggest does it.

** TODO org-capture

I think we can already move to core

** TODO DWIM script integration

Should be almost a straightforward copy, just need to consider which bash scripts I copy across, if any

** TODO org-agenda

I think we can already move to core

** TODO kurecolor

Add some elisp with the requisite regex-search and elisp colour calls, I have achieved this in the past, before I found the more convenient option of kurecolor

** TODO Ada

Unfortunately this may be the only elisp package that I may need to bake into this whole concept.  Current ada-mode isn't supported out of the box in Emacs, it is suggested to use the AdaCore ada-mode but that is a pain to compile (mainly due to trying to install gnatcoll), I have found the old ada mode used by Emacs for that adequate, so this may need to be separately downloaded and baked in.

These is also the potential to use ada-mode-lite and leverage eglot for the rest.

** TODO transients

Convert all transients which rely on Emacs 28 implementation of built-in transients.  The same can be achieved comfortably with a simple menu to stdout and read key type system.

*** TODO my/transient-outlining-and-folding

Transient menu for outline-mode.

*** TODO my/prog-folding

Enable and configure outline minor mode for code folding.  This function sets up the outline minor mode tailored for programming modes based on basic space / tab indentation.

* TODO Features that won't be converted to core

** TODO calendar / calfw

** TODO themes

** TODO ox-hugo

** TODO eglot

Not too much I can do about this, however I could apply some =etag= replacement functionality, but it really isn't the same.

* Testing

Created an =emacs-core.desktop= file containing the following:

#+begin_src 
[Desktop Entry]
Name=Emacs Core
GenericName=Text Editor
Comment=Edit text
MimeType=text/english;text/plain;text/x-makefile;text/x-c++hdr;text/x-c++src;text/x-chdr;text/x-csrc;text/x-java;text/x-moc;text/x-pascal;text/x-tcl;text/x-tex;application/x-shellscript;text/x-c;text/x-c++;
Exec=emacs --init-directory=~/.emacs.d.core
Icon=emacs
Type=Application
Terminal=false
Categories=Development;TextEditor;
StartupNotify=true
StartupWMClass=Emacs
Keywords=emacs;
Actions=new-window;new-instance;

[Desktop Action new-window]
Name=New Window
Exec=emacs --init-directory=~/.emacs.d.core

[Desktop Action new-instance]
Name=New Instance
Exec=emacs --init-directory=~/.emacs.d.core %F
#+end_src

and run the basic core Emacs config and test the new features

* Configuration Highlights

Here’s a breakdown of some key sections in the configuration:

** Completion

Provides simple abbreviation-based completion and an enhanced `hippie-expand` using the following functions:

#+begin_src elisp
;; -> completion
(setq-default abbrev-mode t)
(setq hippie-expand-try-functions-list
      '(try-complete-file-name-partially
        try-complete-file-name
        try-expand-all-abbrevs
        try-expand-dabbrev
        try-expand-dabbrev-all-buffers
        try-expand-dabbrev-from-kill
        try-complete-lisp-symbol-partially
        try-complete-lisp-symbol))
#+end_src

** Basic Mode-line with Fido Mode

Improves the vanilla Emacs minibuffer with more responsive completion using `icomplete`:

#+begin_src elisp
(fido-mode 1)
(define-key icomplete-minibuffer-map (kbd "M-RET") 'my-icomplete-exit-minibuffer-with-input)
(setq icomplete-compute-delay 0)
(setq icomplete-show-matches-on-no-input t)
#+end_src

** Keybindings for Custom Navigation

Define global keybindings for quick access to files and tabs:

#+begin_src elisp
;; -> keys-navigation
(global-set-key (kbd "M-o") my-jump-keymap)
(define-key my-jump-keymap (kbd "e") (lambda () (interactive) (find-file "~/.emacs.d/init.el")))

;; Open scratch buffer
(define-key my-jump-keymap (kbd "r") (lambda () (interactive) (switch-to-buffer "*scratch*")))
#+end_src

**Basic Backups and Data Safety**
Control backup behavior for Emacs:

#+begin_src elisp
;; -> backups
(setq make-backup-files 1)
(setq backup-directory-alist '(("." . "~/backup"))
      backup-by-copying t
      version-control t
      delete-old-versions t
      kept-new-versions 10
      kept-old-versions 5)
#+end_src

**Window Management and Visual Tuning**
Toggle windows, fonts, and visual features:

#+begin_src elisp
;; -> keys-visual
(global-set-key (kbd "C-q") my-win-keymap)
(define-key my-win-keymap (kbd "n") #'display-line-numbers-mode)
(define-key my-win-keymap (kbd "f") #'font-lock-mode)
(define-key my-win-keymap (kbd "m") #'my/load-theme)
#+end_src

* Default Modes and UX Settings

Some key modes are enabled by default for a smoother editing experience:

#+begin_src elisp
;; -> modes
(column-number-mode 1)
(show-paren-mode t)
(global-auto-revert-mode t)
(tab-bar-history-mode 1)
#+end_src

** Additional Configurations

Along with the above highlights, the configuration includes extensive keybindings, system-specific tweaks (for Windows and Linux), and a set of helper functions for day-to-day text processing, file management, and window handling.

* Custom Functions

#+begin_src elisp
;; Duplicates a file in Dired mode with an incremented name
(defun my/dired-duplicate-file (arg)
  "Create a copy of a file in Dired with a numerical increment."
  (interactive "p")
  ;; Implementation...
  )
#+end_src

For a more complete list, explore the `init.el` configuration file.

* Notes

- This configuration intentionally avoids external Emacs packages like `use-package` or `straight.el` to maintain simplicity and remove the requirement for package management.
- Tested on both Linux (SLES15) and Windows environments for compatibility and portability.
